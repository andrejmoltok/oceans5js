generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                        Int       @id @default(autoincrement()) @db.UnsignedInt
  username                  String    @unique(map: "user_unique_1") @db.VarChar(100)
  email                     String    @unique(map: "user_unique") @db.VarChar(100)
  emailVerified             Boolean   @default(false)
  passwordHash              String    @db.VarChar(100)
  firstname                 String    @db.VarChar(100)
  lastname                  String?   @db.VarChar(100)
  role                      String    @default("player") @db.VarChar(100)
  birthYear                 Int?      @default(1934) @db.UnsignedInt
  gender                    String?   @db.VarChar(50)
  location                  String?   @db.VarChar(100)
  status                    String    @db.VarChar(100)
  lockedAt                  DateTime? @db.Timestamp(0)
  mfaEnabled                Boolean   @default(false)
  mfaComplete               Boolean   @default(false)
  lastActive                DateTime? @default(now()) @db.Timestamp(0)
  createdAt                 DateTime  @default(now()) @db.Timestamp(0)
  codes                     codes[]
  games_games_player1Touser games[]   @relation("games_player1Touser")
  games_games_player2Touser games[]   @relation("games_player2Touser")
  games_games_winnerTouser  games[]   @relation("games_winnerTouser")
  lobby                     lobby[]
  mfa                       mfa?
  moves                     moves[]
  player                    player[]
  session                   session[]
}

model session {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  userID      Int       @db.UnsignedInt
  sessionData String    @unique(map: "session_unique") @db.VarChar(1000)
  loginAt     DateTime  @default(now()) @db.Timestamp(0)
  logoutAt    DateTime? @db.Timestamp(0)
  status      String    @db.VarChar(100)
  user        user      @relation(fields: [userID], references: [id], onDelete: Cascade, map: "session_user_FK")

  @@index([userID], map: "session_user_FK")
}

model player {
  id            Int     @id @default(autoincrement()) @db.UnsignedInt
  userID        Int     @db.UnsignedInt
  accuracyRatio Decimal @default(0) @db.Decimal(10, 0)
  avgScore      Int     @default(0) @db.UnsignedInt
  gamesLost     Int     @default(0) @db.UnsignedInt
  gamesPlayed   Decimal @default(0) @db.Decimal(10, 0)
  gamesWon      Int     @default(0) @db.UnsignedInt
  level         Int     @default(1) @db.UnsignedInt
  loseRatio     Decimal @default(0) @db.Decimal(10, 0)
  nickname      String  @db.VarChar(100)
  imgURL        String? @db.VarChar(1000)
  playtimeTotal Decimal @default(0) @db.Decimal(10, 0)
  rank          String  @default("Seaman") @db.VarChar(100)
  totalPoints   Int     @default(0) @db.UnsignedInt
  winRatio      Decimal @default(0) @db.Decimal(10, 0)
  xp            Int     @default(0) @db.UnsignedInt
  user          user    @relation(fields: [userID], references: [id], onDelete: Cascade, map: "player_user_FK")

  @@index([userID], map: "player_user_FK")
}

model codes {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  userID    Int       @db.UnsignedInt
  codeType  String    @db.VarChar(100)
  code      String    @db.VarChar(1000)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  used      Boolean   @default(false)
  usedAt    DateTime? @db.Timestamp(0)
  expired   Boolean   @default(false)
  user      user      @relation(fields: [userID], references: [id], onDelete: Cascade, map: "codes_user_FK")

  @@index([userID], map: "codes_user_FK")
}

model notify {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  location  String   @db.VarChar(200)
  message   String   @db.LongText
  createdAt DateTime @default(now()) @db.Timestamp(0)
}

model lobby {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  userID    Int      @db.UnsignedInt
  username  String   @db.VarChar(100)
  message   String   @db.LongText
  createdAt DateTime @default(now()) @db.Timestamp(0)
  user      user     @relation(fields: [userID], references: [id], onDelete: Cascade, map: "lobby_user_FK")

  @@index([userID], map: "lobby_user_FK")
}

model games {
  id                       Int       @id @default(autoincrement()) @db.UnsignedInt
  player1                  Int       @db.UnsignedInt
  player2                  Int       @db.UnsignedInt
  winner                   Int       @db.UnsignedInt
  status                   String    @db.VarChar(50)
  length                   DateTime? @db.Time(0)
  startedAt                DateTime  @default(now()) @db.Timestamp(0)
  endedAt                  DateTime? @db.Timestamp(0)
  user_games_player1Touser user      @relation("games_player1Touser", fields: [player1], references: [id], onUpdate: Restrict, map: "games_user_FK")
  user_games_player2Touser user      @relation("games_player2Touser", fields: [player2], references: [id], onUpdate: Restrict, map: "games_user_FK_1")
  user_games_winnerTouser  user      @relation("games_winnerTouser", fields: [winner], references: [id], onUpdate: Restrict, map: "games_user_FK_2")
  moves                    moves[]

  @@index([player1], map: "games_user_FK")
  @@index([player2], map: "games_user_FK_1")
  @@index([winner], map: "games_user_FK_2")
}

model moves {
  id       Int     @id @default(autoincrement()) @db.UnsignedInt
  gameID   Int     @db.UnsignedInt
  playerID Int     @db.UnsignedInt
  turn     Int     @db.UnsignedInt
  message  String? @db.MediumText
  action   String  @db.VarChar(100)
  x        Int     @db.UnsignedInt
  y        String  @db.VarChar(1)
  games    games   @relation(fields: [gameID], references: [id], onUpdate: Restrict, map: "moves_games_FK")
  user     user    @relation(fields: [playerID], references: [id], onUpdate: Restrict, map: "moves_user_FK")

  @@index([gameID], map: "moves_games_FK")
  @@index([playerID], map: "moves_user_FK")
}

model mfa {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  userID       Int      @unique(map: "mfa_unique") @db.UnsignedInt
  secretBase32 String   @db.LongText
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  user         user     @relation(fields: [userID], references: [id], onDelete: Cascade, map: "mfa_user_FK")
}
